void 'void'
identifier 'abort'
l_paren '('
r_paren ')'
semi ';'
int 'int'
identifier 'bork'
l_square '['
numeric_constant '4'
r_square ']'
l_square '['
numeric_constant '3'
r_square ']'
equal '='
l_brace '{'
numeric_constant '1'
comma ','
numeric_constant '2'
comma ','
numeric_constant '3'
comma ','
numeric_constant '4'
comma ','
numeric_constant '5'
comma ','
numeric_constant '6'
comma ','
numeric_constant '7'
comma ','
numeric_constant '8'
comma ','
numeric_constant '9'
comma ','
numeric_constant '10'
comma ','
numeric_constant '11'
comma ','
numeric_constant '12'
r_brace '}'
semi ';'
void 'void'
identifier 'function'
l_paren '('
int 'int'
identifier 'width'
comma ','
int 'int'
identifier 'data'
l_square '['
r_square ']'
l_square '['
identifier 'width'
r_square ']'
r_paren ')'
l_brace '{'
int 'int'
identifier 'i'
comma ','
identifier 'j'
semi ';'
while 'while'
l_paren '('
identifier 'i'
less '<'
numeric_constant '4'
r_paren ')'
while 'while'
l_paren '('
identifier 'j'
less '<'
identifier 'width'
r_paren ')'
if 'if'
l_paren '('
identifier 'bork'
l_square '['
identifier 'i'
r_square ']'
l_square '['
identifier 'j'
r_square ']'
exclaimequal '!='
identifier 'data'
l_square '['
identifier 'i'
r_square ']'
l_square '['
identifier 'j'
r_square ']'
r_paren ')'
identifier 'abort'
l_paren '('
r_paren ')'
semi ';'
r_brace '}'
void 'void'
identifier 'test'
l_paren '('
r_paren ')'
l_brace '{'
identifier 'function'
l_paren '('
numeric_constant '3'
comma ','
identifier 'bork'
r_paren ')'
semi ';'
r_brace '}'
int 'int'
identifier 'bork2'
l_square '['
numeric_constant '2'
r_square ']'
l_square '['
numeric_constant '3'
r_square ']'
l_square '['
numeric_constant '4'
r_square ']'
equal '='
l_brace '{'
numeric_constant '1'
comma ','
numeric_constant '2'
comma ','
numeric_constant '3'
comma ','
numeric_constant '4'
comma ','
numeric_constant '5'
comma ','
numeric_constant '6'
comma ','
numeric_constant '7'
comma ','
numeric_constant '8'
comma ','
numeric_constant '9'
comma ','
numeric_constant '10'
comma ','
numeric_constant '11'
comma ','
numeric_constant '12'
comma ','
numeric_constant '13'
comma ','
numeric_constant '14'
comma ','
numeric_constant '15'
comma ','
numeric_constant '16'
comma ','
numeric_constant '17'
comma ','
numeric_constant '18'
comma ','
numeric_constant '19'
comma ','
numeric_constant '20'
comma ','
numeric_constant '21'
comma ','
numeric_constant '22'
comma ','
numeric_constant '23'
comma ','
numeric_constant '24'
r_brace '}'
semi ';'
void 'void'
identifier 'function2'
l_paren '('
int 'int'
identifier 'width'
comma ','
int 'int'
identifier 'width2'
comma ','
int 'int'
identifier 'data'
l_square '['
r_square ']'
l_square '['
identifier 'width'
r_square ']'
l_square '['
identifier 'width2'
r_square ']'
r_paren ')'
l_brace '{'
int 'int'
identifier 'i'
comma ','
identifier 'j'
comma ','
identifier 'k'
semi ';'
while 'while'
l_paren '('
identifier 'i'
less '<'
numeric_constant '2'
r_paren ')'
while 'while'
l_paren '('
identifier 'j'
less '<'
identifier 'width'
r_paren ')'
while 'while'
l_paren '('
identifier 'k'
less '<'
identifier 'width2'
r_paren ')'
if 'if'
l_paren '('
identifier 'bork2'
l_square '['
identifier 'i'
r_square ']'
l_square '['
identifier 'j'
r_square ']'
l_square '['
identifier 'k'
r_square ']'
exclaimequal '!='
identifier 'data'
l_square '['
identifier 'i'
r_square ']'
l_square '['
identifier 'j'
r_square ']'
l_square '['
identifier 'k'
r_square ']'
r_paren ')'
identifier 'abort'
l_paren '('
r_paren ')'
semi ';'
r_brace '}'
void 'void'
identifier 'test2'
l_paren '('
r_paren ')'
l_brace '{'
identifier 'function2'
l_paren '('
numeric_constant '3'
comma ','
numeric_constant '4'
comma ','
identifier 'bork2'
r_paren ')'
semi ';'
r_brace '}'
int 'int'
identifier 'main'
l_paren '('
r_paren ')'
l_brace '{'
identifier 'test'
l_paren '('
r_paren ')'
semi ';'
identifier 'test2'
l_paren '('
r_paren ')'
semi ';'
return 'return'
numeric_constant '0'
semi ';'
r_brace '}'
eof ''
